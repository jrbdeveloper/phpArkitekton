<?phpclass Database{	public $Table;	public $Columns = array();	public $KeyName;	public $KeyValue;		/**	 * Class constructor	 *	 * @access Public	 * @param String $host	 * @param String $username	 * @param String $password	 * @param String $database	 * @return Void	 */	public function __construct($host=null,$username=null,$password=null,$database=null)	{		$this->db_host 			= $host;		$this->db_username 		= $username;		$this->db_password 		= $password;		$this->db_database 		= $database;		$this->db_connection 	= '';			}	/**	 * This method allows the implemention to hide the use of mysql_query() and use instead getRecordset([sql string])	 *	 * @param String $strSqlStmt	 * @return String	 */	public function getRecordset($strSqlStmt)	{		return mysql_query($strSqlStmt); 	}		/**	 * This method returns the number of records in the resuls set	 * 	 * @access Public	 * @param Resource $result	 * @return Integer	 */	public function getRowCount($result=null, $query=null)	{		$_result = $result;		if($query != '')			$_result = $this->getRecordset($query);		return mysql_num_rows($_result); 	}		/**	 * This method hides mysql_fetch_array() and provide getRecords() instead	 *	 * @param String $strSqlStmt	 * @return String	 */	public function getRecords($result)	{		//return mysql_fetch_array($result);		return mysql_fetch_assoc($result);	}		/**	 * Gets the ID of the last query executed	 * 	 * @access Public	 * @return Integer	 */	public function getLastId()	{		return mysql_insert_id();	}		/**	 * Checks for the existance of a specific record in the database.	 *	 * @param String $table	 * @param String $key	 * @param Integer $value	 * @return Boolean	 */	public function RecordExists($table=null, $key=null, $value=null, $sql=null)	{		if(isset($sql))			$result = mysql_query($sql);		else			$result = mysql_query('SELECT * FROM '.$table.' WHERE '.$key.'='.$value);				$num_rows = $this->getRowCount($result);		if($num_rows > 0)			return true;		else			return false;	}		/**	 * Object delete method	 *	 * @param String $table	 * @param String $key	 * @param Integer $value	 * @return Integer	 */	public function Delete($table,$key,$value)	{		mysql_query('DELETE FROM '.$table.' WHERE '.$key.'='.$value);		return mysql_affected_rows();	}		/**	 * This method hide mysql_query() and provides execute() instead.	 *	 * @param String $strSqlStmt	 * @return Boolean	 */	public function execute($query)	{		return mysql_query($query, $this->db_connection);	}		/**	 * Method to open a connection to the database	 *	 * @param String $strHost	 * @param String $strUsername	 * @param String $strPassword	 * @param String $strDatabase	 */	public function Open($strHost=null,$strUsername=null,$strPassword=null,$strDatabase=null)	{		$this->db_host 		= empty($strHost) 		? $this->db_host 		: $strHost;		$this->db_username 	= empty($strUsername) 	? $this->db_username 	: $strUsername;		$this->db_password 	= empty($strPassword) 	? $this->db_password 	: $strPassword;		$this->db_database 	= empty($strDatabase) 	? $this->db_database 	: $strDatabase;				$this->db_connection = mysql_connect($this->db_host,$this->db_username,$this->db_password);		mysql_select_db($this->db_database);		return;	}	/**	 * Method for closing the connection to the database	 *	 * @access Public	 * @return Boolean	 */	public function Close($toRelease=null)	{		if(isset($toRelease) && (!empty($toRelease) && !is_null($toRelease)))			$this->release($toRelease);					return mysql_close($this->db_connection);	}	/**	 * This method releases the recordset	 * @access Public	 * @return Boolean	 */	public function release($result)	{		return mysql_free_result($result);		}	/**	 * This method is used to precent SQL injection attaks	 * 	 * @access Public	 * @return String	 */	public function Clean($str)	{		/*		$return = '';		if(get_magic_quotes_gpc())			$return = stripslashes($str); 		if(!is_numeric($str))  			$return = mysql_real_escape_string($str);		else			$return = filter_var($str,FILTER_SANITIZE_NUMBER_INT);				return $return;		*/		return $str;	}	/**	 * Enter description here...	 *	 * @access Public	 * @param Mixed $value	 * @return String	 */	public function ConvertDate($value)	{		return date('m/d/Y',strtotime($value));	}}?>